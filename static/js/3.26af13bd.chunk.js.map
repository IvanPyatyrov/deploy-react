{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","s","item","src","message","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","validate","required","placeholder","MyPosts","React","memo","postsElements","posts","reverse","map","p","key","id","postsBlock","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","profile","error","style","formSummaryError","createField","Input","type","Object","keys","contacts","contact","ProfileData","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","photos","large","userPhoto","mainPhoto","alt","target","files","length","initialValues","formData","then","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.26af13bd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2IcXz\",\"mainPhoto\":\"ProfileInfo_mainPhoto__2-P0y\",\"contact\":\"ProfileInfo_contact__1LDM9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1Z_9j\",\"posts\":\"MyPosts_posts__1GWy7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__27ZHu\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src='https://hips.hearstapps.com/digitalspyuk.cdnds.net/16/03/1453464632-movies-avatar-still-01.jpg?resize=480:*'/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nlet AddNewPostForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea} name=\"newPostText\" validate={[required, maxLength10]} placeholder={\"Post message\"} />\r\n        </div>\r\n        <div>\r\n            <button>Add post</button>\r\n        </div>\r\n    </form>\r\n};\r\n\r\nlet AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"}) (AddNewPostForm);\r\n\r\n\r\nconst MyPosts = React.memo(props => {\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n        .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\n\r\nexport default MyPosts;","import {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect (mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\nexport default MyPostsContainer;","import React, {useEffect, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status);\r\n    }, [props.status] );\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    };\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b>Status</b> <span onClick={activateEditMode}>{props.status || \"----\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                       value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><button>save</button></div>\r\n        {error && <div className={style.formSummaryError}>\r\n            {error}\r\n        </div>}\r\n        <div>\r\n            <b>Full name:</b> {createField(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job:</b> {createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n        </div>\r\n\r\n        <div>\r\n            <b>My professional skills:</b>\r\n            {createField(\"My professional skills:\", \"lookingForAJobDescription\", [], Textarea)}\r\n        </div>\r\n\r\n        <div>\r\n            <b>About me</b>\r\n            {createField(\"About me\", \"aboutMe\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={s.contact}>\r\n            <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'}) (ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto} alt=\"avatar\"/>\r\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n                    : <ProfileData goToEditMode={ () => {setEditMode(true)} } profile={profile} isOwner={isOwner} />}\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\r\n    return <div>\r\n        {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n        <div>\r\n            <b>Full name:</b> {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job:</b> {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills:</b> {profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n\r\n        <div>\r\n            <b>About me</b> {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n      <div>\r\n          <ProfileInfo savePhoto={props.savePhoto}\r\n                       isOwner={props.isOwner}\r\n                       profile={props.profile}\r\n                       status={props.status}\r\n                       saveProfile={props.saveProfile}\r\n                       updateStatus={props.updateStatus} />\r\n          <MyPostsContainer  />\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter)(ProfileContainer);\r\n\r\n"],"sourceRoot":""}